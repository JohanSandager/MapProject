plugins {
    id 'java'
    id 'eclipse'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
    id 'jacoco'
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.8.2'
}

sourceCompatibility = '11'
targetCompatibility = '11'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'view'
    mainClass = 'view.Starter'
}

javafx {
    version = '17.0.2'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}

eclipse {
    classpath {
        containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
        file {
            whenMerged {
                entries.findAll { it.properties.kind.equals('lib') && !it.properties.path.contains("junit") }.each {
                    it.entryAttributes['module'] = 'true'
                }
                entries.findAll { it.properties.path.startsWith('org.eclipse.jdt.launching.JRE_CONTAINER') }.each {
                    it.entryAttributes['module'] = 'true'
                }

            }
        }
    }
}

tasks.register("j") {
    doLast {
        println System.getProperty("java.home")
    }
}

version = '1.0'

tasks.withType(JavaExec) {
    jvmArgs = ['-Xms11g', '-Xmx14g']
}

tasks.withType(Jar.class).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}


/* task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Main-Class': application.mainClass
    }
    //baseName = project.name + '-all'
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}  */